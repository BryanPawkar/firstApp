{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/Header/Header.js","components/ImageSearchBar/ImageSearchBar.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js","components/Logo/logo.png"],"names":["Navigation","style","display","justifyContent","padding","Logo","className","options","max","height","width","href","src","logo","alt","Header","ImageSearchBar","type","placeholder","class","Rank","particlesCustom","particles","number","value","density","enable","value_area","shadow","color","blur","interactivity","detect_on","onhover","mode","retina_detect","App","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iVASeA,G,OAPI,WACf,OACI,yBAAKC,MAAO,CAACC,QAAS,OAAQC,eAAe,WAAYC,QAAS,UAC9D,gD,2CCeGC,EAfF,WACT,OACI,yBAAKC,UAAY,UACb,kBAAC,IAAD,CAAMA,UAAU,OAAOC,QAAS,CAAEC,IAAM,IAAMP,MAAO,CAAEQ,OAAQ,IAAKC,MAAO,MAC3E,yBAAKJ,UAAU,oBACX,uBAAGK,KAAK,gCACJ,yBAAKL,UAAU,cAAf,KACA,yBAAKA,UAAU,cAAf,KACA,yBAAKM,IAAKC,IAAMC,IAAI,2BCHzBC,G,OAPA,WACX,OACI,qCACU,0BAAMT,UAAU,UAAhB,aCYHU,G,OAfQ,WACnB,OACI,yBAAKV,UAAY,SACb,2BACK,iDAAiD,0BAAMA,UAAU,YAAhB,aAEtD,yBAAKA,UAAW,UACZ,yBAAKA,UAAU,QACX,2BAAOW,KAAM,OAAOC,YAAa,wCACjC,gCAAQ,yBAAKC,MAAM,WAAnB,iBCDLC,G,OARF,WACT,OACI,yBAAKd,UAAW,QACZ,2DACA,oCCENe,G,OAAkB,CACtBC,UAAW,CACTC,OAAO,CACLC,MAAO,IACPC,QAAQ,CACNC,QAAQ,EACRC,WAAY,OAGhBC,OAAQ,CACNF,QAAQ,EACRG,MAAO,UACPC,KAAM,GAERC,cAAc,CACZC,UAAW,SACXC,QAAS,CACPP,QAAQ,EACRQ,KAAM,WAGVC,eAAe,KAwBJC,E,uKAlBX,OACE,yBAAK9B,UAAU,OACb,kBAAC,IAAD,CACEA,UAAY,YACZ+B,OAAQhB,IAEV,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZUiB,aCtBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.3aa75519.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './style.css';\r\nconst Navigation = ()=>{\r\n    return(\r\n        <nav style={{display: 'flex', justifyContent:'flex-end', padding: '0 1em' }}>\r\n            <h3>Crear usuario</h3>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation; ","import React from 'react';\r\nimport './style.css';\r\nimport Tilt from 'react-tilt'; \r\nimport logo from './logo.png'; \r\n\r\nconst Logo = () =>{\r\n    return(\r\n        <div className = 'center'>\r\n            <Tilt className=\"Tilt\" options={{ max : 25 }} style={{ height: 100, width: 100 }} >\r\n            <div className=\"Tilt-inner braco\">\r\n                <a href=\"https://www.bryanpawkar.com/\">\r\n                    <div className='estrella b'>.</div>\r\n                    <div className='estrella e'>.</div>\r\n                    <img src={logo} alt=\"Logo Bryan Pawkar\" />        \r\n                </a>\r\n            </div>\r\n            </Tilt>\r\n        </div>\r\n    )\r\n}\r\nexport default Logo; ","import React from 'react';\r\nimport './style.css'\r\n\r\nconst Header = ()=>{\r\n    return(\r\n        <h1>\r\n            Bryan <span className='titulo'>Pawkar</span>\r\n        </h1>\r\n    )\r\n}\r\nexport default Header; ","import React from 'react'; \r\nimport './style.css'; \r\n\r\nconst ImageSearchBar = () =>{\r\n    return(\r\n        <div className = 'barra'>\r\n            <p>\r\n                {'This magic will detect faces in your pictures,'}<span className='parpadeo'> try it.</span>\r\n            </p>\r\n            <div className= 'center'>\r\n                <div className='caja'>\r\n                    <input type= 'text' placeholder= \"https://www.example.com/imagen.jpeg\"/>\r\n                    <button><div class=\"brillo\"></div>DETECTAR</button>\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\nexport default ImageSearchBar; ","import React from 'react'; \r\nimport './style.css';\r\n\r\nconst Rank = () =>{\r\n    return (\r\n        <div className= 'rank'>\r\n            <p>Braco, your current rank is:</p>\r\n            <p>#2</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Rank; ","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport Header from './components/Header/Header';\r\nimport ImageSearchBar from './components/ImageSearchBar/ImageSearchBar';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\nconst particlesCustom = {\r\n  particles: {\r\n    number:{\r\n      value: 100,\r\n      density:{\r\n        enable: true, \r\n        value_area: 1200\r\n      }\r\n    },\r\n    shadow: {\r\n      enable: true,\r\n      color: \"#3CA9D1\",\r\n      blur: 6\r\n    }, \r\n    interactivity:{\r\n      detect_on: \"window\",\r\n      onhover: {\r\n        enable: true, \r\n        mode: \"bubble\"\r\n      }\r\n    },\r\n    retina_detect: true\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return( \r\n      <div className=\"App\">\r\n        <Particles \r\n          className = 'particles'\r\n          params={particlesCustom}\r\n        />\r\n        <Navigation />\r\n        <Header />\r\n        <Logo />\r\n        <Rank/>\r\n        <ImageSearchBar/>\r\n        {/*\r\n        <AiRecognition/>*/}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.63d26eab.png\";"],"sourceRoot":""}